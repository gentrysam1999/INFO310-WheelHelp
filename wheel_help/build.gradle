apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'application'


mainClassName = '.Main'

repositories {
    jcenter()
	
    maven { url 'http://repo1.maven.org/maven2' }
	 
}

dependencies {
    def junitVer = '5.6.2'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitVer
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitVer
	 compile 'org.junit.jupiter:junit-jupiter:5.6.2'
    testCompile group: 'junit', name: 'junit', version: '4.12'
	testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
   
    implementation group: 'com.google.guava', name: 'guava', version: '29.0-jre'
	 
    implementation group: 'com.h2database', name: 'h2', version: '1.4.200'
	
    // https://mvnrepository.com/artifact/net.sf.oval/oval
    implementation group: 'net.sf.oval', name: 'oval', version: '2.1.6'
        
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.+'
    testImplementation group: 'org.assertj', name: 'assertj-swing-junit', version: '3.+'

    def joobyVer = '1.6.8'
    implementation group: 'org.jooby', name: 'jooby-netty', version: joobyVer
    implementation group: 'org.jooby', name: 'jooby-gson', version: joobyVer
}

test {
    useJUnitPlatform()
}

run {
    standardInput = System.in
}

mainClassName = 'Main'

task createMissingSourceDirs {
   group = "Source Directories"
   description = "Create all of the missing source directories for this project."
   doFirst {
      sourceSets.each { def sourceRoot ->
         sourceRoot.allSource.srcDirTrees.each { def sourceDir ->
            if(!sourceDir.dir.exists()) {
               println "Creating ${sourceDir}"
               mkdir sourceDir.dir
            }
         }
      }
   }
}
 
task deleteEmptySourceDirs {
   group = "Source Directories"
   description = "Delete all empty source directories."
   doFirst {
      sourceSets.each { def sourceRoot ->
         sourceRoot.allSource.srcDirTrees.each { def sourceDir ->
            if(sourceDir.dir.exists() && sourceDir.dir.isDirectory() && sourceDir.dir.list().length == 0) {
               println "Removing empty ${sourceDir}"
               sourceDir.dir.delete()
            }
         }
      }
   }
}
sourceSets {
   web {
      resources {
         srcDirs = ['public']
      }
      java {
         srcDirs = []
      }
   }
}
